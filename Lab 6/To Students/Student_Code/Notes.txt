Purpose
To learn how to add and remove from a binary search tree. This lab will prepare you for the upcoming AVL lab.

Key Reading
8.4

Background
A binary search tree (BST), which may sometimes be called an ordered or sorted binary tree, is a node-based data structure where each node references a value, a left child, and a right child. Binary search trees are characterized by the following properties:

The left subtree of a node contains only nodes with values less than the node's value.
The right subtree of a node contains only nodes with values greater than the node's value.
There must be no duplicate nodes.
Both the left and right subtrees of a node also must be binary search trees (each subtree must have the first three properties). [Wikipedia]
Requirements
You will need this files to complete this assignment: Lab6_BST_11_v2.zip  Download

Part 1 - Implement the NodeInterface (5 points)
Implement the NodeInterface.

Part 2 - Add Nodes to the Binary Search Tree (10 points)
Implement the add method in the BSTInterface. You must use your implementation of NodeInterface properly in the structure of your binary search tree.
Implement the getRootNode method in the BSTInterface.

Part 3 - Remove Nodes from the Binary Search Tree (15 points)
Implement the remove method in the BSTInterface. You must use your implementation of NodeInterface properly with your binary search tree.
There are several logically correct ways to remove from a binary search tree. See the requirement notes for instructions on how to remove correctly to pass the test driver.

Part 4 - Pass Valgrind (8 points)
You must pass parts 1 - 3 as well as Valgrind to receive credit for this part.

UML design document. (2 points)

Refer to page 113 in the book for an example.
Please bring when asking TAs questions.
Requirement Notes
There are multiple correct methods for removing nodes from a tree; each method may result in a distinct tree. Some conventions need to be used to ensure that your tree properly matches ours. When removing, use the method described on page 476 of the course text.

Remember to disallow duplicate entries and to handle the case when the element to be removed is not in the tree.

You are required to write a separate '.h' and '.cpp' for every class you implement.

RunTreeDisplay.sh

We have provided a tree display program that will make it easier to view the BST that your program produced and compare it to the expected BST.

To run the tree display, type:

./RunTreeDisplay.sh

into the terminal (open to the same directory that you use to run the test driver.)  This will open a window with a large space in the center (you may see a tree represented there.)  In order to view your tree and compare it to the expected tree, click on the "File" button at the top of the window, select "Open..." and then "Error Report."  This will open a new window with a representation of the expected tree (the blue nodes are the nodes that agree with your tree, the yellow nodes are the nodes that do not agree.)  In order to view your tree, click on the "Show Student" button towards the bottom of the window.  This will open up a representation of the tree that your program returned, with red nodes representing each node that disagrees with the expected tree.

Note: If your test driver does not explicitly say "Please refer to the error files produced to compare your tree with the expected result," then no new error files were produced and the tree display may be using old error files to represent the tree.  If your program crashes, no error files will be created.








//////////////////LAB 6 HELP SESSION NOTES

Binary Tree. It is much faster than a linear linked list. 
For every node, there will be two options further down the tree. Head is called a root. 
Want to add, remove, tell how big it is.

If I want to add something to the tree, I take value V. If it is less than the left, it keeps going on the left until it reaches and empty spot.

Nodes Class design
Has two node pointers, node*left and node* right. And it has a value. 
Can use templated class if wanted, dont have to. 
You do not need a parent node*.  
needs a function, Void SetValue(int value);. 



Node*&

d = 7
c = 8
e = add(c, d)
int add(int& A, d)
a += d;
this sets c to equal a. its pass by reference.



In BST, we have a data member called root. it is a node*.

bool add(value){
	return addrecursive(value, root);
}

bool addrecursive(value, node*& current)
{
	if(curr == null)
	{
		curr = new Node(value);
		// if it adds it in, return true;
		return true;
	}
	else
	{
		if(curr-> > value)
		{
			//move to the left.
			return addrec(value, curr->left);
		}
		if(curr-> < value)
		{
			//move to the right.
			return addrec(value, curr->right);
		}
		else
		{
			//do not allow duplicates
			return false;
		}
	}

}



/////REMOVAL
in BST



bool removeRecursive(value, node*& current)
{
	if(curr == null)  /// if it cant find it, then return false. 
	{
		
		return false;
	}
	else
	{
		if(curr->value > value)
		{
			//move to the left.
			return removerec(value, curr->left);
		}
		if(curr-> < value)
		{
			//move to the right.
			return removerec(value, curr->right);
		}
		if(curr ->value == value)
		{
			this is where to do your deleting.
		}
	}

}


you have to deal with 3 cases
no children nodes
1 node child,
 2 node children

 0 childen
 {
 delete curr.
 current = NULL;
 }


1 child
{
	node* temp curr -> right or left depending on what it has.
	delete curr.
	curr = temp;
}

2 child
{
	root was 7
	we get the inOrder Predicecor, meaning the one that was there chronologically before.
	3 4 5 6 7 8 9
	inorder pred. is 6. we move one to the lefft, and then to the right as far as you can.
	the biggest thing that is less than me.




}

/// call this in the 2 child if statement.
void IOP(node*& toRemove, node*& curr);  /// curr is going to be the one step to the left
{
	///recurse as far right as it can go. 
	toRemove-> setValue(curr-> value);
	node*temp -> curr;
	delete curr; 

	///do those 3 lines, or remove. 

}


bool setValue(value.);

///////YOu need a clear function
you can either do a recursive or 

while (root!= null)
{
	remove root;
}
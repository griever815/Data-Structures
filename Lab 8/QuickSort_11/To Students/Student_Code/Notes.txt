Purpose

The purpose of this lab is to implement quicksort.

Key Reading
10.9-10.10
Background
Quicksort is a sorting algorithm developed by Tony Hoare that, on average, makes O(n log n) comparisons to sort n items. It is also known as partition-exchange sort. In the worst case, it makes O(n^2) comparisons, though this behavior is rare. Quicksort is typically faster in practice than other O(n log n) algorithms. Additionally, quicksort's sequential and localized memory references work well with a cache. Quicksort can be implemented as an in-place partitioning algorithm,

Requirements
You will need these files to complete this assignment:QuickSort_11.zip  Download

Part 1 - Array Tests (5 points)
The Test Driver will test your implementation of the QSInterface.h. To get credit for this part you must pass the first 3 tests. This deals with testing operations such as creating and adding to an array. 
Part 2 - Median of Three (10 points)
This is for the fourth test of the Test Driver. It will test your implementation of the median of three function.
Part 3 - Partition (13 points)

This is the fifth test of the Test Driver. It will test your implementation of the partition function.
Part 4 - Sort All (10 points)

This is the very last test of the test driver. It will test whether or not you are able to create your own recursive function using the medianOfThree() and partition() functions you already coded for the previous tests.
UML design document. (2 points)

Refer to page 113 in the book for an example.
Please bring when asking TAs questions.
Notes

No predefined data structures may be used for this lab; you must use an array.
You are required to write a separate '.h' and '.cpp' for every class you implement.
Please note that because the Test Driver uses random tests, your code will need to be run multiple times to ensure it passes all cases. You must pass each time in order to get full credit for the lab.